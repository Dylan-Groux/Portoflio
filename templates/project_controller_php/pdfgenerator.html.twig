{% extends 'base.html.twig' %}

{% block title %}Fiscalee{% endblock %}

{% block stylesheets %} 
    <link rel="stylesheet" href="{{ asset('styles/app.css') }}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
{% endblock %}

{% block body %}
<div class="container my-5">
    <h1 class="text-center text-primary mb-4">Fiscalee</h1>

    <div class="mb-4">
        <h3 class="text-secondary font">Fiscalee - Une plateforme polyvalente</h3>
        <p>
            Fiscalee est une plateforme SaaS offrant la simplification de la déclaration LMNP en réel simplifié. Ce projet repose sur une architecture moderne combinant PHP pour le back-end et ReactJS pour le front-end, garantissant une expérience utilisateur fluide et performante.
        </p>
        <p>
            Le back-end, développé avec Symfony, gère non seulement la logique métier et les interactions avec la base de données, mais aussi des fonctionnalités avancées comme la génération dynamique de fichiers PDF. 
        </p>
        <p>
            Le front-end, construit avec ReactJS, propose une interface intuitive pour diverses tâches, y compris la saisie d'informations nécessaires pour la déclaration. Ces données sont ensuite traitées et intégrées dans des formulaires PDF grâce à l'utilisation de PDFTK.
        </p>
    </div>

    <div class="mb-4">
        <h2 class="text-secondary">Langages et technologies utilisés</h2>
        <div class="row">
            <div class="col-md-6">
                <ul class="list-group">
                    <li class="list-group-item">PHP</li>
                    <li class="list-group-item">Symfony</li>
                    <li class="list-group-item">PDFTK</li>
                    <li class="list-group-item">Wamp</li>
                    <li class="list-group-item">Figma</li>
                    <li class="list-group-item">MariaDB</li>
                </ul>
            </div>
            <div class="col-md-6">
                <ul class="list-group">
                    <li class="list-group-item">MIKEHAERTL</li>
                    <li class="list-group-item">Libre Office</li>
                    <li class="list-group-item">Adobe Acrobat</li>
                    <li class="list-group-item">Faker</li>
                    <li class="list-group-item">Draw.io</li>
                    <li class="list-group-item">Twig</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="mb-4">
        <h2 class="text-secondary">Etapes</h2>
        <ul class="list-group">
            <li class="list-group-item">
                <strong>1. Maquettage avec Figma :</strong>
                <div>
                    J'ai contribué au projet Fiscalee en réalisant des maquettes sur Figma. Ces maquettes permettent de visualiser l'interface utilisateur et de planifier le design.
                </div>
                <div class="fiscalee-img">
                    <img src="{{ asset('images/fiscalee1.PNG') }}" alt="">
                    <img src="{{ asset('images/fiscalee2.PNG') }}" alt="">
                    <img src="{{ asset('images/fiscalee3.PNG') }}" alt="">
                </div>
            </li>
            <li class="list-group-item">
            <strong>2. Création d'un MCD sur Draw.io :</strong>
            <p>
                Un Modèle Conceptuel de Données (MCD) a été créé sur Draw.io pour structurer la base de données. 
                <br><em>Note :</em> Ce MCD n'est pas disponible sur le site pour des raisons de sécurité évidentes.
            </p>
            </li>
            <li class="list-group-item">
            <strong>3. Création des entités :</strong>
            <p>
                En mode projet, j'ai créé environ une dizaine d'entités tout en collaborant avec un autre développeur. 
                <br>Nous avons travaillé simultanément : lui sur la branche <code>main</code> et moi sur la branche <code>make_entites</code>.
            </p>
            </li>
            <li class="list-group-item">
            <strong>4. Création de fixtures :</strong>
            <p>
                Les fixtures ont été créées pour simuler des données. Voici un exemple de code :
            </p>
            <pre class="bg-dark text-white p-3 rounded">
            <code class="language-php">
                /**
                * Télécharge les fixtures pour la table Declarant
                * @param ObjectManager $manager
                */
                public function load(ObjectManager $manager): void
                {
                    $faker = Factory::create('fr_FR');

                    for ($i = 0; $i < 10; $i++) {
                        $declarant = new Declarant();
                        $declarant->setCivility($faker->boolean);
                        $declarant->setLastname($faker->lastName);
                        $declarant->setFirstname($faker->firstName);
                        $declarant->setBirthdate($faker->dateTimeBetween('-80 years', '-18 years'));
                        $declarant->setBirthCountry($faker->country);
                        $declarant->setBirthDepartment($faker->word);
                        $declarant->setCity($faker->city);
                        $declarant->setPostalCode($faker->postcode);
                        $declarant->setAddress($faker->streetAddress);
                        $declarant->setEmail($faker->email);
                        $declarant->setPhoneNumber($faker->numerify('06########'));
                        $declarant->setNumFiscal($faker->ean8);
                        $declarant->setOwnershipPercentage($faker->numberBetween(0, 100));
                        $declarant->setAddressComplement($faker->streetAddress);

                        $manager->persist($declarant);
                    }

                    $manager->flush();
                    echo "✅ Mes fixtures pour la table Déclarant ont bien été chargées !\n";
                }

                public function getOrder()
                {
                    return 4;
                }
            
            </code>
            </li>
             <li class="list-group-item">
            <strong>5. Création d'un générateur de PDF dynamique</strong>
            <p>
                La totalité des détails sont mentionner plus bas étant donner l'ampleur et l'importance de ce sous-projet
            </p>
            </pre>
    
        <h1 class="text-center text-primary mt-4">Pdf Generator</h1>

    <div class="mb-4">
        <h2 class="text-secondary">Langages et technologies utilisés</h2>
        <div class="row">
            <div class="col-md-6">
                <ul class="list-group">
                    <li class="list-group-item">PHP</li>
                    <li class="list-group-item">Symfony</li>
                    <li class="list-group-item">PDFTK</li>
                    <li class="list-group-item">Wamp</li>
                </ul>
            </div>
            <div class="col-md-6">
                <ul class="list-group">
                    <li class="list-group-item">MIKEHAERTL</li>
                    <li class="list-group-item">Libre Office</li>
                    <li class="list-group-item">Adobe Acrobat</li>
                    <li class="list-group-item">Faker</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="mb-4">
        <h2 class="text-secondary">Présentation rapide</h2>
        <h3 class="text-secondary font">En developpement...</h2>
        <p>
            Ce projet concerne la création d'un fichier PDF pour une déclaration LMNP en réel simplifié. L'objectif est de générer dynamiquement un PDF en fonction des informations saisies par l'utilisateur et stockées dans la base de données. 
        </p>
        <p>
            Lors de la phase de test, des fixtures ont été créées pour simuler des données. Nous avons testé différentes bibliothèques pour la génération de PDF et avons retenu PDFTK. Cette solution permet d'injecter les données saisies par l'utilisateur dans un formulaire PDF préexistant.
        </p>
        <p>
            Un système de gestion des champs PDF a été développé afin de récupérer et associer dynamiquement les valeurs aux bonnes zones du document. Une route spécifique permet d'afficher les champs disponibles d'un formulaire PDF sous forme d'un tableau JSON, facilitant ainsi l'automatisation du processus.
        </p>
        <p>
            La génération du fichier PDF inclut également une gestion avancée des erreurs pour s'assurer que les données soient correctement traitées et affichées.
        </p>
    </div>

    <div class="mb-4">
        <h2 class="text-secondary">Liens vers les documents</h2>
        <div class="list-group">
                <a href="https://docs.google.com/document/d/1m1_udjmOIW3omahz05jHm4mikCiwsf3MMpYFolG0_K8/edit?usp=sharing" target="_blank" class="list-group-item list-group-item-action">Veille informatique</a>
                <a href="https://github.com/Dylan-Groux/GeneratorPDF" target="_blank" class="list-group-item list-group-item-action">Dépôt distant</a>
        </div>
    </div>

    <div class="mb-4">
        <h2 class="text-secondary">Vidéo de démonstration</h2>
        <div class="ratio ratio-16x9">
            <iframe src="https://www.youtube.com/embed/HjDMfKWWHD0" allowfullscreen></iframe>
        </div>
    </div>

    <div class="mb-4">
        <h2 class="text-secondary">Compétences couvertes</h2> <p>(dans le cadre de l'épreuve E5)<p>
        <ul class="list-group">
            <li class="list-group-item">Travailler en mode projet</li>
            <li class="list-group-item">Mettre à disposition des utilisateurs un service informatique</li>
            <li class="list-group-item">Répondre aux incidents et aux demandes d’assistance et d’évolution</li>
            <li class="list-group-item">Gérer le patrimoine informatique</li>

        </ul>
    </div>

    <div class="text-center">
        <a href="{{ path('accueil') }}" class="nav-link bg-primary text-white p-2 rounded">Retourner à l'accueil</a>
    </div>
</div>
{% endblock %}
